 1. does your ls work?  ls; ls /dir1; ls /dir1/dir3___yes____________________
 2. does your cd work?  cd /dir1; cd /dir1/dir3 _____yes_____________________
 3. does your pwd work? _____yes_____________________________________________
  
 Review Questions:
 
 1. EXPLAIN in words: What does mount root do? 
 
 	Mount root sets up the root file system for both system and user use.

 2. Given  int ino;              // an INODE number
          INODE thisInode;      // an INODE structure
   Write C code to load the INODE of ino into thisInode
   
     get_block(fd, 2, buf);
     gp = (GD *)buf;
     int iblock = gp->bg_inode_table;

     block = (ino-1)/8 + iblock;
     offset = (ino - 1)%8;
     get_block(dev, block, buf);
     thisInode = (INODE *)buf + offset;
     

 3. Assume: MINODE *mip points at an in-memory DIR minode
                                                  INODE
                                                  dev, ino
                                                  refCount
                                                  dirty

 (1). Write C code to print its parent ino:
 	
 	char buf[BLKSIZE];
  	int ino;
  	DIR *dp;
  	char *cp;

  	get_block(mip->dev, mip->INODE.i_block[0], buf); // get 0 block of mip
  	dp = (DIR *)buf;
  	cp = buf;

  	while(cp < buf + BLKSIZE){

    	  if(!strcmp(dp->name, "..")){  // look for directory ".."
      	    ino = dp->inode;    // get inode number when found
      	    printf("parent ino: %d", ino); // print parent ino
      	    return ino;
    	  }

    	 cp += dp->rec_len; // move to next directory if not found
    	 dp = (DIR *) cp;

       }

 (2). HOW to find the name string of this DIR INODE?
 
	use above code to get parent inode, then:
	
	char *myname;
	
	for (i = 0; i < 12; i++){
          if (parent->INODE.i_block[i] == 0){
            return 0;
          }

          get_block(parent->dev, parent->INODE.i_block[i], sbuf); // get block of parent inode
          dp = (DIR *)sbuf;
          cp = sbuf;
          
          while(cp < sbuf + BLKSIZE){
            temp = dp->inode;
      
            if(temp == myino){  // if ino is found

              myname = dp->name; // copy name from directory pointer

              return myname;  // return found name
            }
            cp += dp->rec_len;
            dp = (DIR *)cp;
          }
       }
 		

